cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data,...)
x$setinverse(inv)
inv
}
funs <- makeCacheMatrix()
funs$set(matrix(1:4, 2))
funs$get()
funs$setInverse()
funs$setinverse()
funs$getinverse()
cacheSolve(funs)
cacheSolve(funs2)
funs2 <- makeCacheMatrix()
funs2$set(matrix(1:9, 3))
funs$get()
funs2$get()
cacheSolve(funs2)
funs2$set(matrix(1:4, 2))
funs2$get()
cacheSolve(funs2)
## cachematrix.R
##
## Caching the Inverse of a Matrix
##
## VP91
## The first function, makeCacheMatrix creates a special "matrix",
## which is really a list containing a function to
## set the value of the matrix inverse
## get the value of the matrix
## set the value of the matrix inverse
## get the value of the matrix inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function() inv <<- solve(x)
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Return a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data,...)
x$setinverse()
inv
}
cacheSolve(funs2)
x
rbinom(prob = 0.5, 10)
rbinom(prob = 0.5, size = 10)
?rbinom
rnorm(10)
rbinom(10, prob = 0.5, size = 2)
rbinom(20, prob = 0.5, size = 2)
rbinom(20, prob = 0.5, size = 5)
rbinom(20, prob = 0.5, size = 5)
rbinom(20, prob = 0.5, size = 5)
rbinom(20, prob = 0.5, size = 5)
rbinom(20, prob = 0.5, size = 5)
rbinom(20, prob = 0.5, size = 2)
rbinom(20, prob = 0.5, size = 2)
rbinom(20, prob = 0.5, size = 2)
rbinom(20, prob = 0.5, size = 1)
rbinom(20, prob = 0.5, size = 3)
rbinom(20, prob = 0.5, size = 4)
rbinom(20, prob = 0.5, size = 5)
rbinom(20, prob = 0.5, size = 5)
rbinom(20, prob = 0.5, size = 5)
rbinom(20, prob = 0.5, size = 10)
swirl()
library(swirl)
rm(list=ls())
swirl()
0.8
0.5*0.8*1.6
0.64
mypdf
integrate(mypdf, lower = 0, upper = 1.6)
sqrt(2)
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
0.5*(edh + edl)
integrate(myfunc, 0, 2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
rbinom(100, prob = 0.5, size = 20)
rbinom(100, prob = 0.5, size = 20)/20
phats <- rbinom(100, prob = 0.5, size = 20)/20
l1 <- phats - qnorm(0.975)*sqrt(phats * (1-phats)/n)
l1 <- phats - qnorm(0.975)*sqrt(phats * (1-phats)/20)
l1
u1 <- phats + qnorm(0.975)*sqrt(phats * (1-phats)/20)
u1
mean(l1 < 0.5 & u1 > 0.5)
mean(l1 < 0.5 & u1 > 0.5)
library(swirl)
swirl
swirl()
swirl()
swirl()
swirl()
dice_sqr
ex2_fair <- dice_sqr * PDF
ex2_fair <- dice_sqr * pdf()
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair - 3.5^2
sum(dice_high * dice_sqr) - 3.5^2
sum(dice_high * dice_sqr) - edg^2
sum(dice_high * dice_sqr) - edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
sd(rpois(10, lambda = 4))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
0.5/sqrt(10)
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
choose(5,3)*(0.8^3)*(0.1^2) + choose(5,4)*(0.8^4)*(0.1^1) + choose(5,5)*(0.8^5)*(0.1^0)
choose(5,3)*(0.8^3)*(0.2^2) + choose(5,4)*(0.8^4)*(0.2^1) + choose(5,5)*(0.8^5)*(0.2^0)
pbinom(2, 5, prob = 0.8)
1- pbinom(2, 5, prob = 0.8)
pbinom(2, 5, prob = 0.8, lower.tail = FALSE)
qnorm(0.1)
0
qnorm(0.975, 3, )
qnorm(0.975, 3, 2)
3 + 1.96*2
pnorm(1200, mean = 1020, sd = 50, lower.tail = FALSE)
pnorm((1200-1020)/50, lower.tail = FALSE)
qnorm(0.75, mean = 1020, sd = 50)
0.53
0.53
ppois(3, lambda lambda = 10)
ppois(3, lambda = 10)
ppois(3, lambda = 2.5*4)
pbinom(5, 1000, .01)
ppois(5, lambda = .01*1000)
ppois(5, .01*1000)
ppois(5, 1000*0.01)
qnorm(0.95, mean = 1100, sd = 75)
qnorm(0.95, mean = 1100, sd = 7.5)
pbinom(3, prob = 0.5, n = 5, lower.tail = FLASE)
pbinom(3, prob = 0.5, 5, lower.tail = FLASE)
pbinom(3, prob = 0.5, 5, lower.tail = FALSE)
ppois(10, lambda = 5*3)
library(datasets)
data("ChickWeight")
head(ChickWeight)
head(ChickWeight, 20)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
library(reshape2)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
head(wideCW)
phat <- 7/8
phat
p <- 0.5
q <- 0.5
n <- 8
tstat <- (phat - p)/sqrt(p*q/n)
tstat
qt(0.95, 7)
phat <- 6/8
tstat <- (phat - p)/sqrt(p*q/n)
tstat
qt(0.95, 8)
qt(0.975,8)
1100 + c(-1,1)*qt(0.975,8)*30/sqrt(9)
6/qt(0.975,8)
se <- 0.64*sqrt(0.2)
-2 + c(-1,1)*qt(0.975, 18)*se
-2 + c(-1,1)*qt(0.95, 18)*se
-2 + c(-1,1)*qt(0.975, 18)*se
se <- 0.8*sqrt(0.2)
-2 + c(-1,1)*qt(0.975, 18)*se
qnorm(0.95)
20/sqrt(4.25)
sp <- sqrt((1.5^2 + 1.8^2)/2)
error <- qt(0.95, 16)*sp*sqrt(2/9)
-4 + c(-1,1)*error
swirl()
library(swirl)
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(0.975, 2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g2 - g1
mean(difference)
s <- sd(difference)
mn + c(-1,1)*qt(0.975, 9)*s/sqrt(10)
t.test(difference)$conf.int
sp <- sqrt((7*15.34^2 + 20*188.23^2)/27)
sp <- 7*15.34^2 + 20*18.23^2
nx <- 27
ns <- 8 + 21 -2
sp <- sqrt(sp/ns)
(132.86 - 127.44) + c(-1,1)*qt(0.975, 27)*sp*sqrt(1/8 + 1/21)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
sp <- sqrt((9*var(g1) + 9*var(g2))/18)
md+c(-1,1)*qt(.975,18)*sp*sqrt(0.2)
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g2, g1, var.equal = TRUE, paired = FALSE)$conf.int
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE)$conf
1
num <- (15.34^2/8 + 18.23^2/21)^2
1
den <- 15.34^4/8^2/7 + 18.23^4/21^2/20
mydef <- num/den
mydf <- num/den
1
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(0.95)
pnorm(30+z, lower.tail = FALSE)
pnorm(30+z,mean=30,lower.tail=FALSE)
pnorm(30+z,mean=32,lower.tail=FALSE)
pnorm(30+z,mean=32,sd = 1, lower.tail=FALSE)
pnorm(30+z*2,mean=32,sd = 2, lower.tail=FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n=26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n=27, sd=1, type = "one.sample", alt = "one.sided")$delta
3.5
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh, nh*B, replace = TRUE)
resam <- matrix(sam, nrow = B, ncol = nh)
meds <- apply(resam, 1, median)
median(fh) - medain(meds)
median(fh) - median(meds)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians, c(0.025, 0.975))
quantile(meds, c(0.025, 0.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
obs <- testStat(BCcounts, group)
obs
mean(Bdata$count) - mean(Cdata$count)
sample(group)
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
mean(perms>obs)
testStat(DEcounts, group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
library(swirl)
rm(list=ls())
swirl()
head(pValues)
sum(pValues < 0.05)
sum(p.adjust(pValues, method = "bonferroni") < 0.05)
sum(p.adjust(pValues, method = "BH") < 0.05)
tail(trueStatus)
table(pValues2 < 0.05, trueStatus)
24/524
24//500
24/500
table(p.adjust(pValues2, method = "bonferroni")  < 0.05, trueStatus)
table(p.adjust(pValues2, method = "BH")  < 0.05, trueStatus)
c1 <- c(140, 138, 150, 148, 135)
c2 <- c(132, 135, 151, 146, 130)
?pt
?qt
?t.test
t.test(c1, c2, paired = TRUE)
t.test(c1, c2, paired = TRUE, alternative = "two.sided")
t.test(c1, c2, paired = TRUE, alternative = "less")
t.test(c1, c2, paired = TRUE, alternative = "two.sided")
1100 + c(-1,1)*qt(0.975, 8)*30/sqrt(9)
power.t.test(delta = .01, sd = .04, alternative =  "one.sided", power = 0.9)$n
power.t.test(delta = .01, sd = .04, alternative =  "one.sided", power = 0.9)
power.t.test(delta = .01, sd = .04, alternative =  "one.sided", power = 0.9, type = "one.sample")$n
power.t.test(delta = .01, sd = .04, alternative =  "one.sided", n = 100, type = "one.sample")$power
?pt\
?pt
se <- sqrt(1.5^2 + 1.8^2)
se <- se/3
se
tstat <- -4/se
tstat
qt(0.05, 16)
qt(0.001, 16)
pt(tstat, 16)
phat <- 10/1787
ppois(phat, lambda = 0.01)
phat <- 10/17.87
ppois(phat, lambda = 0.01)
10/17.87
ppois(phat, lambda = 1)
phat
ppois(phat, lambda = 1)
pbinom(3,4,.5) - pbinom(2,4,.5)
pbinom(2,0,0.5)
pbinom(3,4,0.5)
pbinom(2,4,0.5, lower.tail = FALSE)
pt(1,3, lower.tail = FALSE)
df <- read.csv("C:/New/R Programming/RepData_PeerAssessment1/activity.zip", header=TRUE)
head(df)
df <- read.csv("C:/New/R Programming/RepData_PeerAssessment1/activity.zip", header=TRUE, sep = ",")
head(df)
df <- read.table("C:/New/R Programming/RepData_PeerAssessment1/activity.zip", header=TRUE, sep = ",")
head(df)
df <- read.table(unz("C:/New/R Programming/RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
head(df)
df <- csv(unz("C:/New/R Programming/RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
df <- read.csv(unz("C:/New/R Programming/RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
head(df)
df <- read.csv(unz("RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
head(df)
df <- read.csv(unz("RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
head(df, 10)
df <- read.csv(unz("RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
df <- na.omit(df)
head(df)
df <- read.csv(unz("RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
df_withhout_NA <- na.omit(df)
head(df_withhout_NA)
df <- read.csv(unz("RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
df_withhout_NA <- na.omit(df)
# head(df_withhout_NA)
unique(df_withhout_NA[c("date")])
df <- read.csv(unz("RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
df_withhout_NA <- na.omit(df)
# head(df_withhout_NA)
#dates_vactor <- unique(df_withhout_NA[c("date")])
hist(df_withhout_NA$date)
df <- read.csv(unz("RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
df_withhout_NA <- na.omit(df)
# head(df_withhout_NA)
#dates_vactor <- unique(df_withhout_NA[c("date")])
hist(df_withhout_NA$col2)
df <- read.csv(unz("RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
df_withhout_NA <- na.omit(df)
# head(df_withhout_NA)
#dates_vactor <- unique(df_withhout_NA[c("date")])
hist(df_withhout_NA$col1)
df <- read.csv(unz("RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
df_withhout_NA <- na.omit(df)
head(df_withhout_NA)
df <- read.csv(unz("RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
df_withhout_NA <- na.omit(df)
# head(df_withhout_NA)
#dates_vactor <- unique(df_withhout_NA[c("date")])
transform(df_withhout_NA, steps = as.numeric(steps))
hist(df_withhout_NA$col1)
df <- read.csv(unz("RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
df_withhout_NA <- na.omit(df)
# head(df_withhout_NA)
#dates_vactor <- unique(df_withhout_NA[c("date")])
transform(df_withhout_NA, steps = as.numeric(steps))
hist(df_withhout_NA$steps)
df <- read.csv(unz("RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
df_withhout_NA <- na.omit(df)
# head(df_withhout_NA)
dates_vactor <- unique(df_withhout_NA[c("date")])
for (date in dates_vactor){
print(date)
}
df <- read.csv(unz("RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
df_withhout_NA <- na.omit(df)
# head(df_withhout_NA)
dates_vactor <- unique(df_withhout_NA[c("date")])
steps_vactor <- as.vector(length(dates_vactor), NA)
for (date in dates_vactor){
print(date)
}
for (step in steps_vactor){
print(step)
}
df <- read.csv(unz("RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
df_withhout_NA <- na.omit(df)
# head(df_withhout_NA)
dates_vector <- unique(df_withhout_NA[c("date")])
steps_vactor <- as.vector(length(dates_vactor))
for (date in dates_vector){
print(date)
}
for (step in steps_vector){
print(step)
}
df <- read.csv(unz("RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
df_withhout_NA <- na.omit(df)
# head(df_withhout_NA)
dates_vector <- unique(df_withhout_NA[c("date")])
steps_vactor <- vector('numeric')
for (date in dates_vector){
print(date)
}
for (step in steps_vector){
print(step)
}
df <- read.csv(unz("RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
df_withhout_NA <- na.omit(df)
# head(df_withhout_NA)
dates_vector <- unique(df_withhout_NA[c("date")])
steps_vector <- vector('numeric')
for (date in dates_vector){
print(date)
}
for (step in steps_vector){
print(step)
}
df <- read.csv(unz("RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
df_withhout_NA <- na.omit(df)
# head(df_withhout_NA)
dates_vector <- unique(df_withhout_NA[c("date")])
steps_vector <- vector('numeric')
for (i in dates_vector){
print(i)
print(sum(df_withhout_NA[date == i]$steps))
}
df <- read.csv(unz("RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
df_withhout_NA <- na.omit(df)
head(df_withhout_NA)
df <- read.csv(unz("RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
df_withhout_NA <- na.omit(df)
head(df_withhout_NA)
dates_vector <- unique(df_withhout_NA[c("date")])
steps_vector <- vector('numeric')
for (i in dates_vector){
print(i)
print(sum(df_withhout_NA[df_withhout_NA$date == i]$steps))
}
df <- read.csv(unz("RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
df_withhout_NA <- na.omit(df)
head(df_withhout_NA)
dates_vector <- unique(df_withhout_NA[c("date")])
steps_vector <- vector('numeric')
for (i in dates_vector){
print(i)
print(sum(df_withhout_NA[df_withhout_NA$date == i,]$steps))
}
df <- read.csv(unz("RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
df_withhout_NA <- na.omit(df)
# head(df_withhout_NA)
transform(df_withhout_NA, steps = as.numeric(steps))
dates_vector <- unique(df_withhout_NA[c("date")])
steps_vector <- vector('numeric')
for (i in dates_vector){
print(i)
print(sum(df_withhout_NA[df_withhout_NA$date == i,]$steps))
}
rm(list=ls())
cat("\014")
df <- read.csv(unz("RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
df_withhout_NA <- na.omit(df)
# head(df_withhout_NA)
transform(df_withhout_NA, steps = as.numeric(steps))
dates_vector <- unique(df_withhout_NA[c("date")])
steps_vector <- vector('numeric')
for (i in dates_vector){
print(i)
print(sum(df_withhout_NA[df_withhout_NA$date == i,]$steps))
}
cat("\014")
getwd()
setwd("C:/New/R Programming/RepData_PeerAssessment1")
df <- read.csv(unz("RepData_PeerAssessment1/activity.zip", "activity.csv"), header=T, sep=",")
df_withhout_NA <- na.omit(df)
# head(df_withhout_NA)
transform(df_withhout_NA, steps = as.numeric(steps))
dates_vector <- unique(df_withhout_NA[c("date")])
steps_vector <- vector('numeric')
for (i in dates_vector){
print(i)
print(sum(df_withhout_NA[df_withhout_NA$date == i,]$steps))
}
